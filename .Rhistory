coord_cartesian(ylim = c(0, 4)) + # Adjust y-axis limits as needed
stat_pvalue_manual(
pval_data,
label = "p",  # or use a custom label column if desired
tip.length = 0.01,
bracket.size = 0.5,
vjust = -0.5
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(readxl)
library(tidyr)
library(lme4)
library(car)
library(emmeans)
library(effectsize)
library(irr)
library(tidycensus)
library(lme4)
library(gtsummary)
library(ggpubr)
library(tibble)
pval_data <- tribble(
~stereotype_dimension, ~targetRace,  ~group1,  ~group2, ~y.position, ~p,    ~label,
"Nice",                "White",       "Man",    "Woman",      3.5,       0.001, "***"
)
ggplot(plot_data, aes(x = targetGender, y = emmean, fill = targetRace)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2, position = position_dodge(width = 0.9)) +
facet_wrap(~ stereotype_dimension) +
labs(title = "Effect of Target Gender x Race by Dimension",
x = "Target Gender",
y = "Estimated Choice Score",
fill = "Target Race") +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.title = element_text(face = "bold"),
strip.text = element_text(face = "bold", size = 12)
) +
scale_fill_manual(values = c("White" = "#8CD790", "Black" = "#F5A65B", "Asian" = "#7D9EC0")) +
coord_cartesian(ylim = c(0, 4)) + # Adjust y-axis limits as needed
stat_pvalue_manual(
pval_data,
label = "label",  # label for p value
tip.length = 0.01,
bracket.size = 0.5,
vjust = -0.5
)
pval_data <- tribble(
~stereotype_dimension, ~targetRace,  ~group1,  ~group2, ~y.position, ~p,    ~label,
"Nice",                "White",       "Man",    "Woman",      3.5,       0.001, "***"
)
core <-ggplot(plot_data, aes(x = targetGender, y = emmean, fill = targetRace)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2, position = position_dodge(width = 0.9)) +
facet_wrap(~ stereotype_dimension) +
labs(title = "Effect of Target Gender x Race by Dimension",
x = "Target Gender",
y = "Estimated Choice Score",
fill = "Target Race") +
theme_minimal() +
theme(
legend.position = "bottom",
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.title = element_text(face = "bold"),
strip.text = element_text(face = "bold", size = 12)
) +
scale_fill_manual(values = c("White" = "#8CD790", "Black" = "#F5A65B", "Asian" = "#7D9EC0")) +
coord_cartesian(ylim = c(0, 4)) + # Adjust y-axis limits as needed
stat_pvalue_manual(
pval_data,
label = "label",  # label for p value
tip.length = 0.01,
bracket.size = 0.5,
vjust = -0.5
)
ggsave("my_graph.png", plot = p=core, width = 8, height = 6, dpi = 300)
ggsave("my_graph.png", plot = core, width = 8, height = 6, dpi = 300)
# Analysis code from preregistration
mod <- lmer(choice_score ~ targetGenderC * (whiteBlack + whiteAsian) * dimensionC + (1 | PID), data = thesis_long)
## center target gender predictor
thesis_long$targetGenderC <- dplyr::recode(thesis_long$targetGender,
"Man" = -.5,
"Woman" = .5)
thesis_long$dimensionC <- dplyr::recode(thesis_long$stereotype_dimension,
"Smart" = -.5,
"Nice" = .5)
# Two contrasts for 3-level factor:
# Let's start with white people as the race reference group given that we know that children from most racial backgrounds show a bias favoring white people
thesis_long$whiteBlack <- dplyr::recode(thesis_long$targetRace,
"White" = 0,
"Asian" = 0,
"Black" = 1)
thesis_long$whiteAsian <- dplyr::recode(thesis_long$targetRace,
"Asian" = 1,
"Black" = 0,
"White" = 0)
# set a different contrast
thesis_long$blackAsian <- dplyr::recode(thesis_long$targetRace,
"Asian" = 1,
"Black" = 0,
"White" = 0)
thesis_long$blackWhite <- dplyr::recode(thesis_long$targetRace,
"Asian" = 0,
"Black" = 0,
"White" = 1)
# Analysis code from preregistration
mod <- lmer(choice_score ~ targetGenderC * (whiteBlack + whiteAsian) * dimensionC + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
confint(mod)
# we know that there is almost definitely a sig difference between Asian and Black target, but compare them anyways
mod <- lmer(choice_score ~ targetGenderC * (blackAsian + blackWhite) * dimensionC + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
confint(mod)
mod <- lmer(choice_score ~ targetGenderC * (blackAsian + blackWhite) * dimensionNice + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
confint(mod)
# unpack two way interactions between targetGenderC:whiteBlack by recoding gender
# recode gender for simple effect
thesis_long$targetMen <- dplyr::recode(thesis_long$targetGender,
"Man" = 0,
"Woman" = 1)
mod <- lmer(choice_score ~ targetMen * (whiteBlack + whiteAsian) * dimensionNice + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
confint(mod)
# recode gender for simple effect
thesis_long$targetMen <- dplyr::recode(thesis_long$targetGender,
"Man" = 1,
"Woman" = 0)
mod <- lmer(choice_score ~ targetWomen * (whiteBlack + whiteAsian) * dimensionSmart + (1 | PID), data = thesis_long)
# recode gender for simple effect
thesis_long$targetWomen <- dplyr::recode(thesis_long$targetGender,
"Man" = 1,
"Woman" = 0)
mod <- lmer(choice_score ~ targetWomen * (whiteBlack + whiteAsian) * dimensionSmart + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
confint(mod)
#import the dataset
open <- read_xlsx("ISS open-ended.xlsx")
open <-open %>%
filter(exclude %in% c("no", "no; half data"))
### Kappa for smart
kappa_smart <- kappa2(open[, c("smart_code1", "smart_code2")])
print(kappa_smart)
# identify cases with discrepancies for the smart dimension
discrepancies_smart <- open %>%
filter(smart_code1 != smart_code2)
View(discrepancies_smart)
### Kappa for nice
kappa_nice <- kappa2(open[, c("nice_code1", "nice_code2")])
print(kappa_nice)
# identify cases with discrepancies for the nice dimension
discrepancies_nice <- open %>%
filter(nice_code1 != nice_code2)
View(discrepancies_nice)
View(open)
View(open)
#import the dataset
open <- read_xlsx("ISS open-ended.xlsx")
open <-open %>%
filter(exclude %in% c("no", "no; half data"))
### Kappa for smart
kappa_smart <- kappa2(open[, c("smart_code1", "smart_code2")])
print(kappa_smart)
# identify cases with discrepancies for the smart dimension
discrepancies_smart <- open %>%
filter(smart_code1 != smart_code2)
View(discrepancies_smart)
### Kappa for nice
kappa_nice <- kappa2(open[, c("nice_code1", "nice_code2")])
print(kappa_nice)
# identify cases with discrepancies for the nice dimension
discrepancies_nice <- open %>%
filter(nice_code1 != nice_code2)
View(discrepancies_nice)
## Here are the counts for each level coding by dimension, table is in Google slides
# Count frequencies for smart dimension codes
smart_counts <- table(open$smart_code_thirdCoder)
print(smart_counts)
# Count frequencies for nice dimension codes
nice_counts <- table(open$nice_code_thirdCoder)
print(nice_counts)
age = thesis %>%
select(PID, `Age (CALCULATED FROM PREVIOUS COLUMNS)`)
thesis_long = full_join(thesis_long, age)
thesis_long <-thesis_long %>%
mutate(age = as.factor(`Age (CALCULATED FROM PREVIOUS COLUMNS)`))
# clean the data set again because full_join brings in excluded participants and empty rows
thesis_long <- thesis_long %>%
filter(!is.na(PID), !is.na(stereotype_dimension))
mod <- lmer(choice_score ~ (blackWhite + blackAsian) * age * targetGenderC * dimensionC + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
##pairwise comparisons since the blackAsian * age interaction is significant
emm_age_blackAsian_age <- emmeans(mod, ~ blackAsian | age)
emm_age_blackAsian_age
pairs(emm_age_blackAsian_age)
## demographic breakdown for participants - gender
table(thesis$Gender)
ggplot(as.data.frame(table(thesis$Gender)), aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar(theta = "y") +
theme_void() +
theme(legend.title = element_blank()) +
ggtitle("Participant Gender Distribution") +
geom_text(aes(label = paste0(round(Freq / sum(Freq) * 100, 1), "%")),
position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("boy" = "#fffd8d", "girl" = "#89c4ff"))
## demographic breakdown for participants - age
table(thesis$`Age (CALCULATED FROM PREVIOUS COLUMNS)`)
mean(thesis$`Age (CALCULATED FROM PREVIOUS COLUMNS)`)
sd(thesis$`Age (CALCULATED FROM PREVIOUS COLUMNS)`)
ggplot(as.data.frame(table(thesis$`Age (CALCULATED FROM PREVIOUS COLUMNS)`)), aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar(theta = "y") +
theme_void() +
theme(legend.title = element_blank()) +
ggtitle("Participant Age Distribution") +
geom_text(aes(label = paste0(round(Freq / sum(Freq) * 100, 1), "%")),
position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("6" = "#fbd163", "7" = "#89c4ff", "8" = "#90a16a", "9" = "#c3beef", "10" = "#fdbcbc"))
## demographic breakdown for participants - race
thesis <- thesis %>%
mutate(
RaceCategory = case_when(
Race %in% c("A, W", "W, A") ~ "Multiracial",  # Mark A, W or W, A as Multiracial
Race %in% c("W, H") ~ "Latinx/Hispanic",  # Mark W, H as Latinx/Hispanic
Race == "W" ~ "White",  # Mark W as White
Race == "A" ~ "Asian",  # Mark A as Asian
Race == "B" ~ "Black", # Mark B as Black
Race == "Chose not to respond" ~ "Choose not to respond",  # Keep as is
TRUE ~ NA_character_  # If none of the conditions match, assign NA
)
)
# Check the results
table(thesis$RaceCategory)
## create the pie chart
ggplot(as.data.frame(table(thesis$RaceCategory)), aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar(theta = "y") +
theme_void() +
theme(legend.title = element_blank()) +
ggtitle("Participant Race Distribution") +
geom_text(aes(label = paste0(round(Freq / sum(Freq) * 100, 1), "%")),
position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("White" = "#fbd163", "Black" = "#fdbcbc", "Asian" = "#89c4ff", "Latinx/Hispanic" = "#90a16a", "Multiracial" = "#c3beef", "Choose not to respond" = "red"))
# whiteAsian x experimenter race interaction:
emm_expRace_whiteAsian <- emmeans(mod, ~ whiteAsian | experimenterRace)
experimenterRace = thesis %>%
select(PID, experimenterRace)
thesis_long = full_join(thesis_long, experimenterRace)
# clean the data set again because full_join brings in excluded participants and empty rows
thesis_long <- thesis_long %>%
filter(!is.na(PID), !is.na(stereotype_dimension))
thesis_long$experimenterRace <- dplyr::recode(thesis_long$experimenterRace,
"Asian" = -.5,
"White" = .5)
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * experimenterRace + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
# whiteAsian x experimenter race interaction:
emm_expRace_whiteAsian <- emmeans(mod, ~ whiteAsian | experimenterRace)
emm_expRace_whiteAsian
pairs(emm_expRace_whiteAsian)
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * experimenterRace * dimensionC + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
## breakdown for experimenter race
table(thesis$experimenterRace)
ggplot(as.data.frame(table(thesis$experimenterRace)), aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar(theta = "y") +
theme_void() +
theme(legend.title = element_blank()) +
ggtitle("Experimenter Race Distribution (by numbers of session)") +
geom_text(aes(label = paste0(round(Freq / sum(Freq) * 100, 1), "%")),
position = position_stack(vjust = 0.5)) +
scale_fill_manual(values = c("White" = "#fffd8d", "Asian" = "#89c4ff"))
age = thesis %>%
select(PID, `Age (CALCULATED FROM PREVIOUS COLUMNS)`)
thesis_long = full_join(thesis_long, age)
thesis_long <-thesis_long %>%
mutate(age = as.factor(`Age (CALCULATED FROM PREVIOUS COLUMNS)`))
# clean the data set again because full_join brings in excluded participants and empty rows
thesis_long <- thesis_long %>%
filter(!is.na(PID), !is.na(stereotype_dimension))
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * age * targetGenderC * dimensionC + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
emm_age_whiteAsian <- emmeans(mod, ~ whiteAsian | age)
# Convert the emmeans output to a data frame
emm_df <- as.data.frame(emm_age_whiteAsian)
# age is stored as a factor, convert it to numeric for the plot
emm_df$age <- as.numeric(as.character(emm_df$age))
# label the 0 and 1 levels in whiteAsian contrast
emm_df$whiteAsian <- factor(emm_df$whiteAsian,
levels = c("0", "1"),
labels = c("White target", "Asian target"))
# Graph the interaction effect
ggplot(emm_df, aes(x = age, y = emmean, color = whiteAsian, group = whiteAsian)) +
geom_line(size = 1) +
geom_point(size = 3) +
scale_x_continuous(breaks = c(6,7,8,9,10)) +
labs(x = "Age (years)",
y = "Children's Choice Score",
color = "White vs. Asian Contrast") +
theme_minimal() +
ggtitle("Interaction of Age and White vs. Asian Contrast on Children's Choice")
# rewrite the mod for graph
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * age * targetGenderC * stereotype_dimension + (1 | PID), data = thesis_long)
emm_whiteAsian_age_dimension <- emmeans(mod, ~ whiteAsian | age | stereotype_dimension)
emm_df <- as.data.frame(emm_whiteAsian_age_dimension)
# Create a line plot: x-axis = age, separate lines for whiteAsian, faceted by dimensionC
ggplot(emm_df, aes(x = age, y = emmean, group = whiteAsian, color = whiteAsian)) +
geom_line(size = 1) +
geom_point(size = 3) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL), width = 0.2) +
facet_wrap(~ stereotype_dimension) +
labs(x = "Age",
y = "Choice Score",
color = "Target Race\n(0 = White, 1 = Asian)",
title = "Three-Way Interaction: Target Race by Age and Stereotype Dimension") +
theme_minimal()
## set a new mod for graph
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * Gender * targetGender * dimensionC + (1 | PID), data = thesis_long)
Gender = thesis %>%
select(PID, Gender)
thesis_long <- full_join(thesis_long, Gender, by = "PID")
## center gender
thesis_long$GenderC <- dplyr::recode(thesis_long$Gender,
"boy" = -.5,
"girl" = .5)
# clean the data set again because full_join brings in excluded participants and empty rows
thesis_long <- thesis_long %>%
filter(!is.na(PID), !is.na(stereotype_dimension))
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * GenderC * targetGenderC * dimensionC + (1 | PID), data = thesis_long)
summary(mod) ## Here is where you will get the betas (Estimate column), but ignore the p value and other stats in this code because it's not using the type of estimation parameters that you'll use
Anova(mod, type=3, test = "F") #Here you are going to get the F-statistics & p values
emm_gender_targetGender <- emmeans(mod, ~ targetGenderC | GenderC)
emm_gender_targetGender
pairs(emm_gender_targetGender)
## set a new mod for graph
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * Gender * targetGender * dimensionC + (1 | PID), data = thesis_long)
emm_gender_targetGender <- emmeans(mod, ~ targetGender | Gender)
df_emm <- as.data.frame(emm_gender_targetGender)
## bar chart
ggplot(df_emm, aes(x = Gender, y = emmean, fill = targetGender)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2,
position = position_dodge(width = 0.9)
) +
labs(
x = "Child's Gender",
y = "Estimated Choice Score",
fill = "Target Gender",
title = "Interaction: Child's Gender x Target Gender"
) +
scale_fill_manual(values = c("Woman" = "lightblue", "Man" = "#edc559")) +
theme_minimal()
## set a new mod for graph
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * Gender * targetGender * dimensionC + (1 | PID), data = thesis_long)
emm_gender_targetGender <- emmeans(mod, ~ targetGender | Gender)
df_emm <- as.data.frame(emm_gender_targetGender)
## bar chart
ggplot(df_emm, aes(x = Gender, y = emmean, fill = targetGender)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2,
position = position_dodge(width = 0.9)
) +
labs(
x = "Child's Gender",
y = "Estimated Choice Score",
fill = "Target Gender",
title = "Two-Way Interaction: Child's Gender x Target Gender"
) +
scale_fill_manual(values = c("Woman" = "lightblue", "Man" = "#edc559")) +
theme_minimal()
## set a new mod for graph
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * experimenterRace * dimensionC + (1 | PID), data = thesis_long)
emm_experimenterRace_targetRace <- emmeans(mod, ~ experimenterRace | whiteAsian)
df_emm <- as.data.frame(emm_experimenterRace_targetRace)
## bar chart
ggplot(df_emm, aes(x = whiteAsian, y = emmean, fill = experimenterRace)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2,
position = position_dodge(width = 0.9)
) +
labs(
x = "Target Race",
y = "Estimated Choice Score",
fill = "Experimenter Race",
title = "Two-Way Interaction: Experimenter Race x Target Race"
) +
scale_fill_manual(values = c("White" = "#8CD790", "Black" = "#F5A65B", "Asian" = "#7D9EC0")) +
theme_minimal()
## set a new mod for graph
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * experimenterRace * dimensionC + (1 | PID), data = thesis_long)
emm_experimenterRace_targetRace <- emmeans(mod, ~ experimenterRace | whiteAsian)
df_emm <- as.data.frame(emm_experimenterRace_targetRace)
## bar chart
ggplot(df_emm, aes(x = whiteAsian, y = emmean, fill = experimenterRace)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2,
position = position_dodge(width = 0.9)
) +
labs(
x = "Target Race",
y = "Estimated Choice Score",
fill = "Experimenter Race",
title = "Two-Way Interaction: Experimenter Race x Target Race"
) +
scale_fill_manual(values = c("White" = "#8CD790", "Asian" = "#7D9EC0")) +
theme_minimal()
## set a new mod for graph
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * experimenterRace * dimensionC + (1 | PID), data = thesis_long)
emm_experimenterRace_targetRace <- emmeans(mod, ~ experimenterRace | whiteAsian)
# Convert the emmeans object to a data frame.
df_emm <- as.data.frame(emm_experimenterRace_targetRace)
# Recode whiteAsian as a factor with proper labels.
df_emm <- df_emm %>%
mutate(whiteAsian = factor(whiteAsian, levels = c(0, 1),
labels = c("White", "Asian")),
experimenterRace = factor(experimenterRace))
# Create the bar graph.
ggplot(df_emm, aes(x = whiteAsian, y = emmean, fill = experimenterRace)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2,
position = position_dodge(width = 0.9)) +
labs(
x = "Target Race",
y = "Estimated Choice Score",
fill = "Experimenter Race",
title = "Interaction: Experimenter Race x Target Race (White vs. Asian)"
) +
scale_fill_manual(values = c("White" = "#8CD790", "Asian" = "#7D9EC0")) +
theme_minimal()
levels(df_emm$experimenterRace)
View(thesis_long)
View(thesis_long)
View(thesis)
View(thesis)
## set a new mod for graph
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * experimenterRace * dimensionC + (1 | PID), data = thesis_long)
emm_experimenterRace_targetRace <- emmeans(mod, ~ experimenterRace | whiteAsian)
# Convert the emmeans object to a data frame.
df_emm <- as.data.frame(emm_experimenterRace_targetRace)
# Recode whiteAsian as a factor with proper labels.
df_emm <- df_emm %>%
mutate(whiteAsian = factor(whiteAsian, levels = c(0, 1),
labels = c("White", "Asian")),
experimenterRace = factor(experimenterRace, levels = c(-.5, .5),
labels = c("White", "Asian")))
# Create the bar graph.
ggplot(df_emm, aes(x = whiteAsian, y = emmean, fill = experimenterRace)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2,
position = position_dodge(width = 0.9)) +
labs(
x = "Target Race",
y = "Estimated Choice Score",
fill = "Experimenter Race",
title = "Interaction: Experimenter Race x Target Race (White vs. Asian)"
) +
scale_fill_manual(values = c("White" = "#8CD790", "Asian" = "#7D9EC0")) +
theme_minimal()
## set a new mod for graph
mod <- lmer(choice_score ~ (whiteBlack + whiteAsian) * experimenterRace * dimensionC + (1 | PID), data = thesis_long)
emm_experimenterRace_targetRace <- emmeans(mod, ~ experimenterRace | whiteAsian)
# Convert the emmeans object to a data frame.
df_emm <- as.data.frame(emm_experimenterRace_targetRace)
# Recode whiteAsian as a factor with proper labels.
df_emm <- df_emm %>%
mutate(whiteAsian = factor(whiteAsian, levels = c(0, 1),
labels = c("White", "Asian")),
experimenterRace = factor(experimenterRace, levels = c(-.5, .5),
labels = c("White", "Asian")))
# Create the bar graph.
ggplot(df_emm, aes(x = whiteAsian, y = emmean, fill = experimenterRace)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), width = 0.8) +
geom_errorbar(aes(ymin = lower.CL, ymax = upper.CL),
width = 0.2,
position = position_dodge(width = 0.9)) +
labs(
x = "Target Race",
y = "Estimated Choice Score",
fill = "Experimenter Race",
title = "Two-Way Interaction: Experimenter Race x Target Race (White vs. Asian)"
) +
scale_fill_manual(values = c("White" = "#8CD790", "Asian" = "#7D9EC0")) +
theme_minimal()
